/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/1252dafc-07b0-4121-9e57-3a35fb7f1fd5

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"


// On board Sensor
#include <DHT.h>
#include <DHT_U.h>
#include <Adafruit_Sensor.h>

#define DHTPIN  2

#define DHTTYPE DHT22

DHT_Unified dht(DHTPIN, DHTTYPE);

unsigned long last_time;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // get the onboard sensor ready
  dht.begin();

  sensor_t sensor;

  // Defined in thingProperties.h
  initProperties();

  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::CONNECT, doThisOnConnect);

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  last_time = millis();
}

void loop() {
  ArduinoCloud.update();
  // Your code here



  if (millis() - last_time > 280000)
  {
    // Get temperature from the pcb
    sensors_event_t event;
    dht.temperature().getEvent(&event);

    if (isnan(event.temperature)) {
      inner_temperature = -100.0;
    }
    else {
      inner_temperature = event.temperature;
    }
   last_time = millis();
  }
}

void doThisOnConnect(){

  sensors_event_t event;
  dht.temperature().getEvent(&event);

  if (isnan(event.temperature))
  {
    inner_temperature = -100.0;
  }
  else {
   inner_temperature = event.temperature;
 }
}
